import 'package:firebase_database/firebase_database.dart';

class RTDBService {
  static final databaseReference = FirebaseDatabase.instance;

  static final RTDBService _instance = RTDBService._internal();

  static RTDBService get instance => _instance;

  RTDBService._internal();

  /// insert && update && delete
  static void insert({Student? data}) async {
    // databaseReference.child("Students").push().set(data); // Random alphanumeric id generated by push() Method
    databaseReference.ref().child("Students").child("${data!.id}").set(data.toMap());
  }

  static void updateData({Student? data}) {
    databaseReference.ref().child('Students').child("${data!.id}").update(data.toMap());
  }

  static void deleteData({int? id}) {
    databaseReference.ref().child('Students').child("$id").remove();
  }

  static Future<void> getAllData() async {
    final event = await databaseReference.ref().once(DatabaseEventType.value);
    Map<dynamic, dynamic> dataMap = event.snapshot.value as Map;
    List<Student> student = [];
    dataMap['Students'].forEach((key, value) {
      student.add(Student(city: value['city'], name: value['name'], id: value['id'], age: value['age']));
    });
    print('getAllData: ${student.toString()}');
  }

  static Future<void> getUserData() async {
    DatabaseReference ref = databaseReference.ref("Students/122");

    /// getting specific key-value
    DatabaseReference child = ref.child("name");
    DatabaseEvent event = await child.once();
    print('get specific key: ${event.snapshot.value.toString()}');

    /// get whole map
    DatabaseEvent map = await ref.once();
    print('get whole map: ${map.snapshot.value.toString()}');
  }

  /// stream for get data with any changes
  static Future<void> streamForUserBaseData() async {
    final Query query = databaseReference.ref().child('Students').child('122');
    query.onValue.listen((DatabaseEvent event) {
      print('streamForUserBaseData : ${event.snapshot.value.toString()}');
    });
  }

  static Future<void> streamForAllData() async {
    final Query query = databaseReference.ref().child('Students');
    query.onValue.listen((DatabaseEvent event) {
      print('streamForAllData : ${event.snapshot.value.toString()}');
    });
  }
}

class Student {
  final int id, age;
  final String name, city;

  Student({
    required this.city,
    required this.name,
    required this.id,
    required this.age,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': this.id,
      'age': this.age,
      'name': this.name,
      'city': this.city,
    };
  }
}